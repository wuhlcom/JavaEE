package com.zhilu.device.service;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import com.zhilu.device.repository.TblIotDeviceRepository;
import com.zhilu.device.bean.TblIotDevice;;

@Service
public class TblIotDeviceService {	
	    @Autowired
	    private TblIotDeviceRepository tblIotDev;
	    
	    /**
	     * 分页查询
	     * */
	    public Page<TblIotDevice> getDevsByPage(int pageNumber,int pageSize){
	        PageRequest request = this.buildPageRequest(pageNumber,pageSize);
	        Page<TblIotDevice> tblIotDevices= this.tblIotDev.findAll(request);
	        return tblIotDevices;
	    }
        
	    /**
         * 建立分页排序请求 
         * @param page
         * @param size
         * @return
         */
        private PageRequest buildPageRequest(int pageNumber, int pagzSize) {
        	// 指定排序方式        	
     		Order orderId = new Order(Direction.DESC, "id");
     		Order orderType = new Order(Direction.ASC, "type");
     		Order orderCreateTime = new Order(Direction.DESC, "createtime");
     		
     		Sort sort = new Sort(orderCreateTime,orderType);
     		pageNumber = pageNumber - 1;     		
     		PageRequest pageable = new PageRequest(pageNumber, pagzSize, sort);
	        return pageable;
	    }
        
        /**
         * 复杂查询测试
         * @param page
         * @param size
         * @return
         */
        public Page<TblIotDevice> findBySepc(int page, int size){
            PageRequest pageReq = this.buildPageRequest(page, size);
            Page<TblIotDevice> tasks = this.tblIotDev.findAll(new MySpec(), pageReq);
            return tasks;
        }
        
     
        private class MySpec implements Specification<TblIotDevice>{

            @Override
            public Predicate toPredicate(Root<TblIotDevice> root, CriteriaQuery<?> query, CriteriaBuilder cb) {

         //1.混合条件查询
              /*Path<String> exp1 = root.get("taskName");
                Path<Date>  exp2 = root.get("createTime");
                Path<String> exp3 = root.get("taskDetail");
                Predicate predicate = cb.and(cb.like(exp1, "%taskName%"),cb.lessThan(exp2, new Date()));
                return cb.or(predicate,cb.equal(exp3, "kkk"));

                类似的sql语句为:
                Hibernate: 
                    select
                        count(task0_.id) as col_0_0_ 
                    from
                        tb_task task0_ 
                    where
                        (
                            task0_.task_name like ?
                        ) 
                        and task0_.create_time<? 
                        or task0_.task_detail=?
                */

        //2.多表查询
            /*Join<Task,Project> join = root.join("project", JoinType.INNER);
                Path<String> exp4 = join.get("projectName");
                return cb.like(exp4, "%projectName%");

                Hibernate: 
                select
                    count(task0_.id) as col_0_0_ 
                from
                    tb_task task0_ 
                inner join
                    tb_project project1_ 
                        on task0_.project_id=project1_.id 
                where
                    project1_.project_name like ?*/ 
               return null ;  
            }
        }
   
   

}
